{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<h1>{{ title }}</h1>\\n<div class=\\\"container-fluid\\\" *ngIf=\\\"!ocrRunning\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <h2>1. Choisir une image</h2>\\n\\n      <ngb-tabset (tabChange)=\\\"tabChange($event)\\\">\\n        <ngb-tab id=\\\"tabUrl\\\" title=\\\"Adresse d'une image\\\">\\n          <ng-template ngbTabContent>\\n            <form>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"selectUrl\\\"></label>\\n                <select class=\\\"form-control\\\" id=\\\"selectUrl\\\" [(ngModel)]=\\\"imgPath\\\" name=\\\"imgPath\\\">\\n                  <option *ngFor=\\\"let img of ocrExamples\\\">{{img}}</option>\\n                </select>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\">Image sélectionnée</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"imgPath\\\" required [(ngModel)]=\\\"imgPath\\\" name=\\\"imgPath\\\">\\n                <small id=\\\"emailHelp\\\" class=\\\"form-text text-muted\\\">Veuillez indiquer une URL d'image contenant du\\n                  text</small>\\n              </div>\\n            </form>\\n          </ng-template>\\n        </ngb-tab>\\n        <ngb-tab id=\\\"tabCapture\\\">\\n          <ng-template ngbTabTitle><b>Capture</b> d'image</ng-template>\\n          <ng-template ngbTabContent>\\n            <webcam [height]=\\\"500\\\" [width]=\\\"500\\\" [trigger]=\\\"triggerObservable\\\" (imageCapture)=\\\"handleImage($event)\\\"\\n              *ngIf=\\\"showWebcam\\\" [allowCameraSwitch]=\\\"allowCameraSwitch\\\" [switchCamera]=\\\"nextWebcamObservable\\\"\\n              captureImageData=\\\"true\\\" [videoOptions]=\\\"videoOptions\\\" [imageQuality]=\\\"1\\\"\\n              (cameraSwitched)=\\\"cameraWasSwitched($event)\\\" (initError)=\\\"handleInitError($event)\\\">\\n            </webcam>\\n            <div class=\\\"btn-toolbar\\\" role=\\\"toolbar\\\" aria-label=\\\"Toolbar with button groups\\\">\\n              <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"First group\\\">\\n                <button class=\\\"btn btn-outline-primary\\\" (click)=\\\"triggerSnapshot();\\\">Prendre la photo</button>\\n                <button class=\\\"btn btn-outline-primary\\\" (click)=\\\"toggleWebcam();\\\">Activer Webcam</button>\\n              </div>\\n              <div class=\\\"btn-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"First grup\\\">\\n                <button class=\\\"btn btn-outline-primary\\\" (click)=\\\"showNextWebcam(true);\\\"\\n                  [disabled]=\\\"!multipleWebcamsAvailable\\\">Next\\n                  Webcam</button>\\n                <input id=\\\"cameraSwitchCheckbox\\\" type=\\\"checkbox\\\" [(ngModel)]=\\\"allowCameraSwitch\\\"><label\\n                  for=\\\"cameraSwitchCheckbox\\\">Allow Camera Switch</label>\\n              </div>\\n              <div class=\\\"input-group mr-2\\\" role=\\\"group\\\" aria-label=\\\"First grup\\\">\\n                <div class=\\\"input-group-prepend\\\">\\n                  <div class=\\\"input-group-text\\\" id=\\\"btnGroupAddon\\\">DeviceId</div>\\n                </div>\\n                <input id=\\\"deviceId\\\" type=\\\"text\\\" [(ngModel)]=\\\"deviceId\\\" name=\\\"deviceId\\\" style=\\\"width: 500px\\\">\\n                <button class=\\\"btn btn-outline-primary\\\" (click)=\\\"showNextWebcam(deviceId);\\\">Activate</button>\\n              </div>\\n            </div>\\n          </ng-template>\\n        </ngb-tab>\\n\\n      </ngb-tabset>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-success\\\" (click)=\\\"startOcr()\\\">2. Reconnaitre</button>\\n\\n    </div>\\n    <div class=\\\"col\\\">\\n      <div *ngIf=\\\"currentTab==='tabUrl'\\\">\\n        <img [src]=\\\"imgPath\\\" width=\\\"100%\\\" />\\n      </div>\\n      <div *ngIf=\\\"currentTab==='tabCapture'\\\">\\n        <div class=\\\"snapshot\\\" *ngIf=\\\"webcamImage\\\">\\n          <h2>Nice one!</h2>\\n          <img [src]=\\\"webcamImage.imageAsDataUrl\\\" width=\\\"100%\\\" />\\n        </div>\\n        <h4 *ngIf=\\\"errors.length > 0\\\">Messages:</h4>\\n        <ul *ngFor=\\\"let error of errors\\\">\\n          <li>{{error | json}}</li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\" *ngIf=\\\"ocrRunning\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <img [src]=\\\"imgUrl\\\" width=\\\"100%\\\" />\\n    </div>\\n    <div class=\\\"col\\\">\\n      <p>{{ocrProgress.status}}</p>\\n      <div class=\\\"progress\\\" *ngIf=\\\"ocrProgress.status!=''\\\">\\n        <div class=\\\"progress-bar\\\" role=\\\"progressbar\\\" [attr.aria-valuenow]=\\\"ocrProgress.progress\\\"\\n          [ngStyle]=\\\"{width: ocrProgress.progress + '%'}\\\" aria-valuemin=\\\"0\\\" aria-valuemax=\\\"100\\\">{{ocrProgress.progress}}\\n        </div>\\n      </div>\\n      <h2>Resultats: </h2>\\n      <p>\\n        {{ ocrResult }}\\n      </p>\\n      <button class=\\\"btn btn-outline-primary\\\" (click)=\\\"ocrRunning=!ocrRunning;\\\">Recommencer</button>\\n    </div>\\n  </div>\\n\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { WebcamImage, WebcamInitError, WebcamUtil } from 'ngx-webcam';\nimport { TesseractWorker } from 'tesseract.js';\n\nexport class Progress {\n  status: string;\n  progress: number;\n}\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'Reconnaissance de caractères';\n  imgPath = 'https://tesseract.projectnaptha.com/img/eng_bw.png';\n  imgUrl = '';\n  currentTab = \"tabUrl\";\n  ocrResult = '';\n  ocrRunning = false;\n  ocrProgress: Progress = { status: '', progress: 0 };\n  ocrExamples = [\n    'https://tesseract.projectnaptha.com/img/eng_bw.png',\n    'https://thgautier92.github.io/CNI-TG.png',\n    'https://courses.cs.vt.edu/csonline/AI/Lessons/VisualProcessing/OCRscans_files/robertson.jpg',\n    'http://faculty.chemeketa.edu/ascholer/cs160/VTCS0/AI/Lessons/VisualProcessing/OCRscans_files/barmudas.jpg',\n    // tslint:disable-next-line:max-line-length\n    'https://image.slidesharecdn.com/objectdetectioncompteurdobjet-111129232726-phpapp02/95/object-detection-compteur-dobjet-1-728.jpg?cb=1322609890'\n  ];\n  public showWebcam = false;           // toggle webcam on/off\n  public allowCameraSwitch = true;\n  public multipleWebcamsAvailable = false;\n  public deviceId: string;\n  public videoOptions: MediaTrackConstraints = {\n    // width: {ideal: 1024},\n    // height: {ideal: 576}\n  };\n  public errors: WebcamInitError[] = [];\n  public webcamImage: WebcamImage = null; // latest snapshot\n  private trigger: Subject<void> = new Subject<void>();   // webcam snapshot trigger\n  // switch to next / previous / specific webcam; true/false: forward/backwards, string: deviceId\n  private nextWebcam: Subject<boolean | string> = new Subject<boolean | string>();\n\n  constructor() { }\n\n  public ngOnInit(): void {\n    WebcamUtil.getAvailableVideoInputs()\n      .then((mediaDevices: MediaDeviceInfo[]) => {\n        this.multipleWebcamsAvailable = mediaDevices && mediaDevices.length > 1;\n      });\n  }\n\n  public triggerSnapshot(): void {\n    this.trigger.next();\n  }\n\n  public toggleWebcam(): void {\n    this.showWebcam = !this.showWebcam;\n  }\n\n  public handleInitError(error: WebcamInitError): void {\n    this.errors.push(error);\n  }\n\n  public showNextWebcam(directionOrDeviceId: boolean | string): void {\n    // true => move forward through devices\n    // false => move backwards through devices\n    // string => move to device with given deviceId\n    this.nextWebcam.next(directionOrDeviceId);\n  }\n  public handleImage(webcamImage: WebcamImage): void {\n    console.log('received webcam image', webcamImage);\n    this.webcamImage = webcamImage;\n  }\n  public cameraWasSwitched(deviceId: string): void {\n    console.log('active device: ' + deviceId);\n    this.deviceId = deviceId;\n  }\n  public get triggerObservable(): Observable<void> {\n    return this.trigger.asObservable();\n  }\n  public get nextWebcamObservable(): Observable<boolean | string> {\n    return this.nextWebcam.asObservable();\n  }\n\n  tabChange(event) {\n    console.log(event);\n    this.currentTab = event.nextId;\n  }\n \n  startOcr() {\n    this.ocrRunning = true;\n    this.ocrResult = 'Recognizing...';\n    const worker = new TesseractWorker();\n    if (this.currentTab === 'tabUrl') {\n      this.imgUrl = this.imgPath;\n    }\n    if (this.currentTab === 'tabCapture') {\n      this.imgUrl = this.webcamImage.imageAsDataUrl;\n    }\n\n    worker\n      .recognize(this.imgUrl)\n      .progress((p) => {\n        // console.log('progress', p);\n        this.ocrProgress.status = p.status;\n        this.ocrProgress.progress = p.progress * 100;\n\n      })\n      .then(({ text }) => {\n        this.ocrResult = text;\n        worker.terminate();\n        this.ocrProgress.status = '';\n      });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FormsModule } from '@angular/forms';\n\nimport {WebcamModule} from 'ngx-webcam';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgbModule,\n    FormsModule,\n    WebcamModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}